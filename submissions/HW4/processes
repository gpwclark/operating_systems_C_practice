#include <errno.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

errno = 0;
pid_t child_PID, wait_PID;
child_PID = fork();

if (child_PID < 0){
  // no child process created, fork failed
  perror("No child process, failed to fork");
}else if (child_PID == 0){
  // printf("I am the child. My childPID is %ld\n", (long)child_PID);
  errno = 0;
  // this is the child process

  if(ret_val == -1){
    //ERROR, LINE EXCEEDS MAX LENGTH
    abort();
  }
} else {
//we are the parent
//printf("I am the parent. My child's PID is %ld\n", (long)child_PID);

  errno = 0; 
  child_PID = wait(&status);
  if (child_PID == -1){ //Wait for child process.
    perror("wait error");

  } else { 

    if (WIFSIGNALED(status) != 0){
      printf("%s\n","Child process terminated, received signal.");
    } else if (WIFEXITED(status) != 0){
      // printf("%s\n", "Child process terminated as expected.");
    } else if(WIFSTOPPED(status != 0)){
      printf("%s\n", "Child process stopped.");
    } else{
      printf("%s\n", "Child process terminated with error.");
    }

  }
  //printf("%s\n","Parent process ended.");

}
